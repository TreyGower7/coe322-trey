import json
import math


def calc_gcd(latitude_1: float, longitude_1: float, latitude_2: float, longitude_2: float) -> float:
    mars_radius = 3389.5 #km
    """
    Calculate distance between points using great circle distance algorithmn
    Args:
        latitude_1: float, longitude_1: float, latitude_2: float, longitude_2: float
    returns:
        Distance(float): contains distance generated by alg
    """
    lat1, lon1, lat2, lon2 = map(math.radians, [latitude_1, longitude_1, latitude_2, longitude_2])
    d_sigma = math.acos( math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.cos(abs(lon1-lon2)))
    return ( mars_radius * d_sigma )

def time_of_sample(sites, index) -> int:
    """
    robot stops to take sample and is stopped for different duration based on meteroite composition
    args:
        sites: a dictionary of a list of dictionaries 
        and index we are on
    Returns:
        hours(integer): time of sample based on meteorite composition
    """
    if sites["sites"][index].get("Site_id") == 1:
        return(1)
    if sites["sites"][index].get("Site_id") == 2:
        return(2)
    else:
        return(3)

with open("generated_sites.json", "r") as f:
    sites = json.load(f)
velocity = 10
total_time =0
lat1 = 16.0
lon1 = 82.0

for x in range(1, len(sites["sites"])): 

    lat2 = sites['sites'][x].get('Latitude')
    lon2 = sites['sites'][x].get('Longitude')

    Distance = calc_gcd(lat1, lon1, lat2, lon2)
    
    time_travel = round(Distance/velocity, 2)
    total_time += round(time_travel, 2)
    time_sample = time_of_sample(sites, x)
    print("Leg= " + str(x) + ", " + "time to travel = " + str(time_travel) + " hr, " + "time to sample = " + str(time_sample) + " hr")   

print("===============================")
print("Number of legs = " + str(len(sites["sites"])) + ", " + "total time elapsed = " + str(total_time) + " hr")

